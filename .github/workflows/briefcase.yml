name: Package with Briefcase and Create Release

on:
  push:
    branches:
      - release

jobs:
  package:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      - name: Add Poetry to PATH
        run: echo "/Users/test/.local/bin" >> $GITHUB_PATH

      - name: Verify Poetry Installation
        run: |
          poetry --version

      - name: Install dependencies
        run: |
          poetry install --no-interaction
      - name: Install certificate
        run: |
          rm -f build.keychain
          echo "${{ secrets.CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p runner build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p runner build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k runner build.keychain
        env:
          CERTIFICATE: ${{ secrets.CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      - name: Package application
        run: |
          poetry run briefcase create
          poetry run briefcase build
          poetry run briefcase package -i "${{ secrets.DEV_ID }}"
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Extract version
        id: extract_version
        run: |
          echo "::set-output name=version::$(grep -oP '(?<=version = ")[^"]*' pyproject.toml)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/Blu-ray\ to\ AVP-${{ steps.extract_version.outputs.version }}.dmg
          asset_name: Blu-ray\ to\ AVP-${{ steps.extract_version.outputs.version }}.dmg
          asset_content_type: application/x-diskcopy